# -*- coding: utf-8 -*-
"""Comment-Toxicity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bmPShMT_yseFmTplvangmKqISbgNV6NA
"""

pip install tensorflow pandas matplotlib sklearn numpy

import os
import pandas as pd
import tensorflow as tf

df = pd.read_csv('/content/drive/MyDrive/data.csv')

df = df.head(100000)

df.iloc[0].comment_text

from tensorflow.keras.layers import TextVectorization

X = df['comment_text']
y = df[df.columns[2:]].values

y

max_feats = 150000

vectorizer = TextVectorization(max_tokens = max_feats,
                              output_sequence_length = 1800,
                              output_mode = 'int')

vectorizer.adapt(X.values)

vectorizer.get_vocabulary()

vectorizer("Hello how are you")

vectorized_text = vectorizer(X.values)

vectorized_text

dataset = tf.data.Dataset.from_tensor_slices((vectorized_text,y))
dataset = dataset.cache()
dataset = dataset.shuffle(90000)
dataset = dataset.batch(16)
dataset = dataset.prefetch(8)

batch_X,batch_y = dataset.as_numpy_iterator().next()

train = dataset.take(int(len(dataset)*.7))
val = dataset.skip(int(len(dataset)*.7)).take(int(len(dataset)*.2))
test = dataset.skip(int(len(dataset)*.9)).take(int(len(dataset)*.1))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Bidirectional,Dense,Dropout,Embedding

model = Sequential()
model.add(Embedding(max_feats+1,32))
model.add(Bidirectional(LSTM(32,activation = 'tanh')))
model.add(Dense(128,activation = 'relu'))
model.add(Dropout(0.2))
model.add(Dense(256,activation = 'relu'))
model.add(Dropout(0.2))
model.add(Dense(128,activation = 'relu'))
model.add(Dense(6,activation = 'sigmoid'))

model.compile(loss='BinaryCrossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

history = model.fit(train,epochs = 5,validation_data = val)

input_text = vectorizer("You freaking suck!")

df.columns[2:]

import numpy as np

res = model.predict(np.expand_dims(input_text,0))

(res > 0.5).astype(int)

batch_X, batch_y = test.as_numpy_iterator().next()

(model.predict(batch_X) > 0.5).astype(int)

batch_y

from tensorflow.keras.metrics import Precision,Recall,CategoricalAccuracy
import re

pre = Precision()
rec = Recall()
acc = CategoricalAccuracy()

for batch in test.as_numpy_iterator():
    X_true,y_true = batch
    yhat = model.predict(X_true)
    
    y_true = y_true.flatten()
    yhat = yhat.flatten()
    
    pre.update_state(y_true,yhat)
    rec.update_state(y_true,yhat)
    acc.update_state(y_true,yhat)

print(f'Precision: {pre.result().numpy()}, Recall:{rec.result().numpy()}, Accuracy:{acc.result().numpy()}')

pip install gradio jinja2

import gradio as gr

model.save('toxicity.h5')

def score_comment(comment):
    vectorized_comment = vectorizer([comment])
    results = model.predict(vectorized_comment)
    
    text = ''
    for idx, col in enumerate(df.columns[2:]):
        text += '{}: {}\n'.format(col, results[0][idx]>0.5)
    
    return text

interface = gr.Interface(fn=score_comment, 
                         inputs=gr.inputs.Textbox(lines=2, placeholder='Comment to score'),
                        outputs='text')

interface.launch(share=True)